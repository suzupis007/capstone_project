# convert principal care providers from per 100,000 people to per 1,000 people to match other data
chr_data <- all_chr_data %>%
select(#"statecode","countycode",
"fipscode", #"state","county", "year", "county_ranked", "v001_rawvalue", "v001_numerator", "v001_denominator", "v001_cilow", "v001_cihigh", "v001_flag", "v001_race_aian", "v001_race_aian_cilow", "v001_race_aian_cihigh", "v001_race_aian_flag", "v001_race_asian", "v001_race_asian_cilow", "v001_race_black", "v001_race_black_cilow", "v001_race_hispanic", "v001_race_hispanic_cilow", "v001_race_hispanic_cihigh", "v001_race_hispanic_flag", "v001_race_white", "v001_race_white_cilow", "v001_race_white_cihigh", "v001_race_white_flag",
"v002_rawvalue", #"v002_numerator", "v002_denominator", "v002_cilow", "v002_cihigh", "v036_rawvalue", "v036_numerator", "v036_denominator", "v036_cilow", "v036_cihigh",
"v042_rawvalue", #"v042_numerator", "v042_denominator", "v042_cilow", "v042_cihigh",
"v037_rawvalue", #"v037_numerator", "v037_denominator", "v037_cilow", "v037_cihigh", "v037_flag", "v037_race_aian", "v037_race_aian_cilow", "v037_race_aian_cihigh", "v037_race_asian", "v037_race_asian_cilow", "v037_race_asian_cihigh", "v037_race_black", "v037_race_black_cilow", "v037_race_black_cihigh", "v037_race_hispanic", "v037_race_hispanic_cilow", "v037_race_hispanic_cihigh", "v037_race_white", "v037_race_white_cilow", "v037_race_white_cihigh",
"v009_rawvalue", #"v009_numerator", "v009_denominator", "v009_cilow", "v009_cihigh",
"v011_rawvalue", #"v011_numerator", "v011_denominator", "v011_cilow", "v011_cihigh",
"v133_rawvalue", #"v133_numerator", "v133_denominator", "v133_cilow", "v133_cihigh",
"v070_rawvalue", #"v070_numerator", "v070_denominator", "v070_cilow", "v070_cihigh",
"v132_rawvalue", #"v132_numerator", "v132_denominator", "v132_cilow", "v132_cihigh",
"v049_rawvalue", #"v049_numerator", "v049_denominator", "v049_cilow", "v049_cihigh", "v134_rawvalue", "v134_numerator", "v134_denominator", "v134_cilow", "v134_cihigh", "v045_rawvalue", "v045_numerator", "v045_denominator", "v045_cilow", "v045_cihigh",
"v014_rawvalue", #"v014_numerator", "v014_denominator", "v014_cilow", "v014_cihigh", "v014_race_aian", "v014_race_aian_cihigh", "v014_race_asian", "v014_race_asian_cilow", "v014_race_asian_cihigh", "v014_race_black", "v014_race_black_cilow", "v014_race_black_cihigh", "v014_race_hispanic", "v014_race_hispanic_cilow", "v014_race_hispanic_cihigh", "v014_race_white", "v014_race_white_cilow", "v014_race_white_cihigh",
"v085_rawvalue", #"v085_numerator", "v085_denominator", "v085_cilow", "v085_cihigh",
"v004_rawvalue", #"v004_numerator", "v004_denominator", "v004_cilow", "v004_cihigh","v004_other_data_1", "v088_rawvalue", "v088_numerator", "v088_denominator", "v088_cilow", "v088_cihigh", "v088_other_data_1",
"v062_rawvalue", #"v062_numerator", "v062_denominator", "v062_cilow", "v062_cihigh", "v062_other_data_1",
"v005_rawvalue", #"v005_numerator", "v005_denominator", "v005_cilow", "v005_cihigh", "v005_race_aian", "v005_race_asian", "v005_race_black", "v005_race_hispanic", "v005_race_white",
"v050_rawvalue", #"v050_numerator", "v050_denominator", "v050_cilow", "v050_cihigh", "v050_race_aian", "v050_race_asian", "v050_race_black", "v050_race_hispanic", "v050_race_white",
"v155_rawvalue", #"v155_numerator", "v155_denominator", "v155_cilow", "v155_cihigh", "v155_race_aian", "v155_race_asian", "v155_race_black", "v155_race_hispanic", "v155_race_white",
"v168_rawvalue", #"v168_numerator", "v168_denominator", "v168_cilow", "v168_cihigh",
"v069_rawvalue", #"v069_numerator", "v069_denominator", "v069_cilow", "v069_cihigh",
"v023_rawvalue", #"v023_numerator", "v023_denominator", "v023_cilow", "v023_cihigh",
"v024_rawvalue", #"v024_numerator", "v024_denominator", "v024_cilow", "v024_cihigh", "v024_race_aian", "v024_race_aian_cilow", "v024_race_aian_cihigh", "v024_race_asian", "v024_race_asian_cilow", "v024_race_asian_cihigh", "v024_race_black", "v024_race_black_cilow", "v024_race_black_cihigh", "v024_race_hispanic", "v024_race_hispanic_cilow", "v024_race_hispanic_cihigh", "v024_race_white", "v024_race_white_cilow", "v024_race_white_cihigh",
"v044_rawvalue", #"v044_numerator", "v044_denominator", "v044_cilow", "v044_cihigh", "v082_rawvalue", "v082_numerator", "v082_denominator", "v082_cilow", "v082_cihigh",
"v140_rawvalue", #"v140_numerator", "v140_denominator", "v140_cilow", "v140_cihigh",
"v135_rawvalue", #"v135_numerator", "v135_denominator", "v135_cilow", "v135_cihigh", "v135_race_aian", "v135_race_aian_cilow", "v135_race_aian_cihigh", "v135_race_asian", "v135_race_asian_cilow", "v135_race_asian_cihigh", "v135_race_black", "v135_race_black_cilow", "v135_race_black_cihigh", "v135_race_hispanic" , "v135_race_hispanic_cilow", "v135_race_hispanic_cihigh", "v135_race_white", "v135_race_white_cilow", "v135_race_white_cihigh",
"v125_rawvalue", #"v125_numerator", "v125_denominator", "v125_cilow", "v125_cihigh",
"v124_rawvalue", #"v124_numerator", "v124_denominator", "v124_cilow", "v124_cihigh", "v136_rawvalue", "v136_numerator", "v136_denominator", "v136_cilow", "v136_cihigh",
"v136_other_data_1", #"v136_other_data_1_cilow", "v136_other_data_1_cihigh",
"v136_other_data_2", #"v136_other_data_2_cilow", "v136_other_data_2_cihigh",
"v136_other_data_3", #"v136_other_data_3_cilow", "v136_other_data_3_cihigh", "v067_rawvalue", "v067_numerator", "v067_denominator", "v067_cilow", "v067_cihigh", "v067_race_aian", "v067_race_aian_cilow", "v067_race_aian_cihigh", "v067_race_asian", "v067_race_asian_cilow", "v067_race_asian_cihigh", "v067_race_black", "v067_race_black_cilow", "v067_race_black_cihigh", "v067_race_hispanic", "v067_race_hispanic_cilow", "v067_race_hispanic_cihigh", "v067_race_white", "v067_race_white_cilow", "v067_race_white_cihigh",
"v137_rawvalue", #"v137_numerator", "v137_denominator", "v137_cilow", "v137_cihigh",
"v147_rawvalue", #"v147_numerator", "v147_denominator", "v147_cilow", "v147_cihigh", "v147_race_aian", "v147_race_aian_cilow", "v147_race_aian_cihigh", "v147_race_asian", "v147_race_asian_cilow", "v147_race_asian_cihigh", "v147_race_black", "v147_race_black_cilow", "v147_race_black_cihigh", "v147_race_hispanic", "v147_race_hispanic_cilow", "v147_race_hispanic_cihigh", "v147_race_white", "v147_race_white_cilow", "v147_race_white_cihigh",
"v127_rawvalue", #"v127_numerator", "v127_denominator", "v127_cilow", "v127_cihigh", "v127_race_aian", "v127_race_aian_cilow", "v127_race_aian_cihigh", "v127_race_asian", "v127_race_asian_cilow", "v127_race_asian_cihigh", "v127_race_black", "v127_race_black_cilow", "v127_race_black_cihigh", "v127_race_hispanic", "v127_race_hispanic_cilow", "v127_race_hispanic_cihigh", "v127_race_white", "v127_race_white_cilow", "v127_race_white_cihigh",
"v128_rawvalue", #"v128_numerator", "v128_denominator", "v128_cilow", "v128_cihigh", "v128_race_aian", "v128_race_aian_cilow", "v128_race_aian_cihigh", "v128_race_asian", "v128_race_asian_cilow", "v128_race_asian_cihigh", "v128_race_black", "v128_race_black_cilow", "v128_race_black_cihigh", "v128_race_hispanic", "v128_race_hispanic_cilow", "v128_race_hispanic_cihigh", "v128_race_white", "v128_race_white_cilow", "v128_race_white_cihigh",
"v129_rawvalue", #"v129_numerator", "v129_denominator", "v129_cilow", "v129_cihigh", "v129_race_aian", "v129_race_aian_cilow", "v129_race_aian_cihigh", "v129_race_asian", "v129_race_asian_cilow","v129_race_asian_cihigh", "v129_race_black", "v129_race_black_cilow", "v129_race_black_cihigh", "v129_race_hispanic", "v129_race_hispanic_cilow", "v129_race_hispanic_cihigh", "v129_race_white", "v129_race_white_cilow", "v129_race_white_cihigh",
"v144_rawvalue", #"v144_numerator", "v144_denominator", "v144_cilow", "v144_cihigh", "v145_rawvalue", "v145_numerator", "v145_denominator", "v145_cilow", "v145_cihigh",
"v060_rawvalue", #"v060_numerator", "v060_denominator", "v060_cilow", "v060_cihigh",
"v061_rawvalue", #"v061_numerator", "v061_denominator", "v061_cilow", "v061_cihigh",
"v139_rawvalue", #"v139_numerator", "v139_denominator", "v139_cilow", "v139_cihigh", "v083_rawvalue", "v083_numerator", "v083_denominator", "v083_cilow", "v083_cihigh",
"v138_rawvalue", #"v138_numerator", "v138_denominator", "v138_cilow", "v138_cihigh", "v138_race_aian", "v138_race_aian_cilow", "v138_race_aian_cihigh", "v138_race_asian", "v138_race_asian_cilow", "v138_race_asian_cihigh", "v138_race_black", "v138_race_black_cilow", "v138_race_black_cihigh", "v138_race_hispanic", "v138_race_hispanic_cilow", "v138_race_hispanic_cihigh", "v138_race_white", "v138_race_white_cilow", "v138_race_white_cihigh",
"v143_rawvalue", #"v143_numerator", "v143_denominator", "v143_cilow", "v143_cihigh", "v003_rawvalue", "v003_numerator", "v003_denominator", "v003_cilow", "v003_cihigh", "v122_rawvalue", "v122_numerator", "v122_denominator", "v122_cilow", "v122_cihigh", "v131_rawvalue", "v131_numerator, "v131_denominator", "v131_cilow", "v131_cihigh", "v131_other_data_1",
"v021_rawvalue", #"v021_numerator", "v021_denominator", "v021_cilow", "v021_cihigh",
"v149_rawvalue", #"v149_numerator", "v149_denominator", "v149_cilow", "v149_cihigh",
"v159_rawvalue", #"v159_numerator", "v159_denominator", "v159_cilow", "v159_cihigh", "v159_race_aian", "v159_race_asian", "v159_race_black", "v159_race_hispanic", "v159_race_white",
"v160_rawvalue", #"v160_numerator", "v160_denominator", "v160_cilow", "v160_cihigh", "v160_race_aian", "v160_race_asian", "v160_race_black", "v160_race_hispanic", "v160_race_white",
"v167_rawvalue", #"v167_numerator", "v167_denominator", "v167_cilow", "v167_cihigh",
"v169_rawvalue", #"v169_numerator", "v169_denominator", "v169_cilow", "v169_cihigh",
"v151_rawvalue", #"v151_numerator", "v151_denominator", "v151_cilow", "v151_cihigh",
"v063_rawvalue", #"v063_numerator", "v063_denominator", "v063_cilow", "v063_cihigh", "v063_race_aian", "v063_race_aian_cilow", "v063_race_aian_cihigh", "v063_race_asian", "v063_race_asian_cilow", "v063_race_asian_cihigh", "v063_race_black", "v063_race_black_cilow", "v063_race_black_cihigh", "v063_race_hispanic", "v063_race_hispanic_cilow", "v063_race_hispanic_cihigh", "v063_race_white", "v063_race_white_cilow", "v063_race_white_cihigh",
"v170_rawvalue", #"v170_numerator", "v170_denominator", "v170_cilow", "v170_cihigh",
"v065_rawvalue", #"v065_numerator", "v065_denominator", "v065_cilow", "v065_cihigh",
"v141_rawvalue", #"v141_numerator", "v141_denominator", "v141_cilow", "v141_cihigh",
"v171_rawvalue", #"v171_numerator", "v171_denominator", "v171_cilow", "v171_cihigh", "v172_rawvalue", "v172_numerator", "v172_denominator", "v172_cilow", "v172_cihigh",
"v015_rawvalue", #"v015_numerator", "v015_denominator", "v015_cilow", "v015_cihigh", "v015_race_aian", "v015_race_aian_cilow", "v015_race_aian_cihigh", "v015_race_asian", "v015_race_asian_cilow", "v015_race_asian_cihigh", "v015_race_black", "v015_race_black_cilow", "v015_race_black_cihigh", "v015_race_hispanic", "v015_race_hispanic_cilow", "v015_race_hispanic_cihigh", "v015_race_white", "v015_race_white_cilow", "v015_race_white_cihigh",
"v161_rawvalue", #"v161_numerator", "v161_denominator", "v161_cilow", "v161_cihigh", "v161_other_data_1", "v161_race_aian", "v161_race_aian_cilow", "v161_race_aian_cihigh", "v161_race_asian", "v161_race_asian_cilow", "v161_race_asian_cihigh", "v161_race_black", "v161_race_black_cilow", "v161_race_black_cihigh", "v161_race_hispanic", "v161_race_hispanic_cilow", "v161_race_hispanic_cihigh", "v161_race_white", "v161_race_white_cilow", "v161_race_white_cihigh",
"v148_rawvalue", #"v148_numerator", "v148_denominator", "v148_cilow", "v148_cihigh", "v148_race_aian", "v148_race_aian_cilow", "v148_race_aian_cihigh", "v148_race_asian", "v148_race_asian_cilow", "v148_race_asian_cihigh", "v148_race_black", "v148_race_black_cilow", "v148_race_black_cihigh", "v148_race_hispanic", "v148_race_hispanic_cilow", "v148_race_hispanic_cihigh", "v148_race_white", "v148_race_white_cilow", "v148_race_white_cihigh", "v039_rawvalue", "v039_numerator", "v039_denominator", "v039_cilow", "v039_cihigh", "v039_race_aian", "v039_race_aian_cilow", "v039_race_aian_cihigh", "v039_race_asian", "v039_race_asian_cilow", "v039_race_asian_cihigh", "v039_race_black", "v039_race_black_cilow", "v039_race_black_cihigh", "v039_race_hispanic", "v039_race_hispanic_cilow", "v039_race_hispanic_cihigh", "v039_race_white", "v039_race_white_cilow", "v039_race_white_cihigh",
"v158_rawvalue", #"v158_numerator", "v158_denominator", "v158_cilow", "v158_cihigh", "v158_other_data_1", "v158_other_data_2",
"v177_rawvalue", #"v177_numerator", "v177_denominator", "v177_cilow", "v177_cihigh", "v178_rawvalue", "v178_numerator", "v178_denominator", "v178_cilow", "v178_cihigh",
"v156_rawvalue", #"v156_numerator", "v156_denominator", "v156_cilow", "v156_cihigh", "v153_rawvalue",
"v153_numerator", #"v153_denominator", "v153_cilow", "v153_cihigh", "v154_rawvalue", "v154_numerator", "v154_denominator", "v154_cilow", "v154_cihigh", "v166_rawvalue", "v166_numerator", "v166_denominator", "v166_cilow", "v166_cihigh", "v051_rawvalue", "v051_numerator", "v051_denominator", "v051_cilow", "v051_cihigh",
"v052_rawvalue", #"v052_numerator", "v052_denominator", "v052_cilow", "v052_cihigh",
"v053_rawvalue", #"v053_numerator", "v053_denominator", "v053_cilow", "v053_cihigh", "v054_rawvalue", "v054_numerator", "v054_denominator", "v054_cilow", "v054_cihigh", "v055_rawvalue", "v055_numerator", "v055_denominator", "v055_cilow", "v055_cihigh", "v081_rawvalue", "v081_numerator", "v081_denominator", "v081_cilow", "v081_cihigh", "v080_rawvalue", "v080_numerator" , "v080_denominator", "v080_cilow", "v080_cihigh", "v056_rawvalue", "v056_numerator", "v056_denominator", "v056_cilow", "v056_cihigh", "v126_rawvalue", "v126_numerator", "v126_denominator", "v126_cilow", "v126_cihigh", "v059_rawvalue", "v059_numerator", "v059_denominator", "v059_cilow", "v059_cihigh", "v057_rawvalue", "v057_numerator", "v057_denominator", "v057_cilow", "v057_cihigh",
"v058_rawvalue", #"v058_numerator", "v058_denominator", "v058_cilow", "v058_cihigh"
) %>%
mutate(pcp_pt = v004_rawvalue/100) %>%
select(-v004_rawvalue)
chr_data <- chr_data %>%
rename("fips_code" = "fipscode",
"pct_poor_to_fair_health" = "v002_rawvalue",
"pct_adult_smokers" = "v009_rawvalue",
"pct_obese_adults" = "v011_rawvalue",
"pct_no_exercise" = "v070_rawvalue",
"pct_binge_drinkers" = "v049_rawvalue",
"pct_under_65_no_health_insurance" = "v085_rawvalue",
"pct_highschool_diploma" = "v168_rawvalue",
"pct_some_college" = "v069_rawvalue",
"pct_adult_poverty" = "v024_rawvalue",
"inequality_ratio" = "v044_rawvalue",
"social_clubs_per_10k" = "v140_rawvalue",
"air_polution_metric" =  "v125_rawvalue",
"water_0:1_bad_good" = "v124_rawvalue",
"pct_high_housing_costs" = "v136_other_data_1",
"pct_overcrowded_hh" = "v136_other_data_2",
"pct_no_kitchen_or_plumbinmg" = "v136_other_data_3",
"pct_diabetes" =  "v060_rawvalue",
"pct_food_insecurities" = "v139_rawvalue",
"pct_insufficient_sleep" = "v143_rawvalue",
"school_funding_gap" = "v169_rawvalue",
"pct_income_to_childcare" = "v171_rawvalue",
"pct_voters" = "v177_rawvalue",
"pct_home_owner" = "v153_numerator",
"pct_0_17_age" = "v052_rawvalue",
"pct_18_65_age" = "v053_rawvalue",
"pct_rural_population" = "v058_rawvalue",
"poor_mental_health" = "v042_rawvalue",
"pct_low_birthweight" = "v037_rawvalue",
"food_enviroment_1:10_bad:good" = "v133_rawvalue",
"pct_access_to_exercise" = "v132_rawvalue",
"teen_births_prk_1k" = "v014_rawvalue",
"mental_health_providers_per_100k" = "v062_rawvalue",
"hospital_stay_per_100k" = "v005_rawvalue",
"pct_elderly_mmmograms" = "v050_rawvalue",
"pct_flu_vaccines_billed" = "v155_rawvalue",
"pct_unemployed" = "v023_rawvalue",
"injury_death_rate_per_100k" = "v135_rawvalue",
"life_expectancy_years" = "v147_rawvalue",
"premature_deaths_per_100k" = "v127_rawvalue",
"underage_deaths_per_100k" = "v128_rawvalue",
"infant_deaths_per_1k_births" = "v129_rawvalue",
"pct_poor_health" = "v144_rawvalue",
"pct_hiv" = "v061_rawvalue",
"drug_overdose_per_100k" = "v138_rawvalue",
"pct_insufficieficient_sleep" = "v143_rawvalue",
"pct_on_time_hs_graduation" = "v021_rawvalue",
"pct_disconnected_youth" = "v149_rawvalue",
"children_reading_score" = "v159_rawvalue",
"children_math_score" = "v160_rawvalue",
"school_segregation_0:1__low:high" = "v167_rawvalue",
"women_to_man_pay_ratio" = "v151_rawvalue",
"median_hh_income" = "v063_rawvalue",
"hourly_living_wage" = "v170_rawvalue",
"children_eligible_for_lunch" = "v065_rawvalue",
"black_white_segregation" = "v141_rawvalue",
"homicides_per_100k" = "v015_rawvalue",
"suicides_per_100k" = "v161_rawvalue",
"firearm_fatalities_per_100k" = "v148_rawvalue",
"juvenile_arrests_per_1k" = "v158_rawvalue",
"traffic_per_meter" = "v156_rawvalue",
"pct_30_min_plus_commute"  = "v137_rawvalue"
)
# convertfips code to numeric to match chr value
sdoh_data$fips_code <- as.numeric(sdoh_data$fips_code)
# check for errors
print(sum(is.na(sdoh_data$fips_code)))
# create new dataset where values have all features and response vector
qol_data <- inner_join(sdoh_data,
chr_data,
by = "fips_code")
# create response vector
qol_data <- qol_data %>%
mutate(response = ifelse(pct_poor_to_fair_health >= 0.12, "worse", "better")) %>%
mutate(response = as.factor(response)) %>%
select(-pct_poor_to_fair_health) %>%
mutate_at(vars(state, county, region), as.factor)
# Sum of NAs in each column
na_counts <- colSums(is.na(qol_data))
# Combine column names and NA counts into a dataframe
na_counts_df <- data.frame(ColumnName = names(na_counts), NA_Count = na_counts)
# Sort the dataframe by NA_Count in descending order
na_counts_df <- na_counts_df[order(-na_counts_df$NA_Count), ]
# View the sorted dataframe
print(na_counts_df)
qol_data <- qol_data %>%
select(
-hourly_living_wage,
-pb_measure,
-co_measure,
-no2_measure,
-so2_measure,
-pm_2.5_measure,
-pct_disconnected_youth,
-infant_deaths_per_1k_births,
-homicides_per_100k,
-drug_overdose_per_100k,
-underage_deaths_per_100k,
-juvenile_arrests_per_1k,
-black_white_segregation,
-firearm_fatalities_per_100k,
-pct_on_time_hs_graduation,
-suicides_per_100k,
-children_eligible_for_lunch,
-pct_hiv,
-children_math_score,
-children_reading_score,
-successful_discharge_rate,
-rehospitalization_rate,
-matches("school_segregation_0:1_low:high"),
-mental_health_providers_per_100k,
-teen_births_prk_1k,
-traffic_per_meter,
-pcp_pt,
-pct_low_birthweight,
-injury_death_rate_per_100k,
-hospital_stay_per_100k,
-premature_deaths_per_100k,
-pct_unemployed.y,
-median_hh_income.y,
-pct_15_min_commute,
-pct_29_min_commute,
-pct_59_min_commute,
-pct_60_min_plus_commute,
-pct_access_to_exercise,
-pct_poor_health,
-life_expectancy_years,
-matches("food_enviroment_1:10_bad:good"),
-poor_mental_health,
-medicare_inpatient_payment,
-medicare_outpatient_payment,
-matches("medicare_e&m_payment"),
-medicare_acute_care_payment,
-matches("medicare_fqrc/rhc_payment"),
-pct_elderly_mmmograms,
-pct_flu_vaccines_billed,
-pct_insufficieficient_sleep,
-women_to_man_pay_ratio
) %>%
na.omit()
glimpse(qol_data)
# find predictors with high correlation to shrink the model
# Subset the dataset to include only numeric variables
# identify values with variance -inflation factors
qol_numeric <- qol_data %>%
mutate(response = if_else(response == "worse", 0, 1)) %>%
select(-state,
-county,
-region)
# Calculate the correlation matrix
cor_matrix <- cor(qol_numeric)
# Find the indices of correlations greater than 0.7
high_cor_indices <- which(abs(cor_matrix) > 0.7, arr.ind = TRUE)
# Extract the pairs of variables with correlation greater than 0.7
high_cor_pairs <- data.frame(
var1 = rownames(cor_matrix)[high_cor_indices[, 1]],
var2 = colnames(cor_matrix)[high_cor_indices[, 2]],
correlation = cor_matrix[high_cor_indices]
)
# Filter out duplicates and self-correlations
high_cor_pairs <- high_cor_pairs[high_cor_pairs$var1 != high_cor_pairs$var2, ]
high_cor_pairs <- high_cor_pairs[!duplicated(t(apply(high_cor_pairs, 1, sort))), ]
print(high_cor_pairs)
qol_numeric <- qol_numeric %>%
select(-adv_practice_nurse_pt,
-pct_0_17_age,
-pct_adult_poverty,
-pct_female,
-pct_hh_broadband,
-pct_hh_cell_data,
-matches("pct_hh_inc_10,000"),
-matches("pct_hh_inc_100,000"),
-matches("pct_hh_inc_14,999"),
-matches("pct_hh_inc_24,999"),
-matches("pct_hh_inc_49,999"),
-pct_hh_no_computing_device,
-pct_hh_no_internet,
-pct_hh_smartphone,
-pct_hh_tablet,
-pct_no_exercise,
-pct_not_citizens,
-pct_people_in_poverty,
-pct_unemployed.x,
-per_capita_income,
-weighted_population,
-pct_food_insecurities,
-pct_hh_computer,
-pct_naturalized_citizens,
-median_rent,
-median_home_value,
-`pct_w/_medicaid`
)
# identify predictors with near-zero variance (high collinearity)
nzv <- nearZeroVar(qol_numeric, saveMetrics = TRUE)
print(nzv)
qol_numeric <- qol_numeric %>%
select(-syringe_exchange_pt
)
vif_values <- vif(lm(response ~ ., data = qol_numeric))
high_vif <- names(vif_values[vif_values > 5])
high_vif
# identify best model for response with regsubset
qol_regfit_full <- regsubsets(response ~ ., qol_numeric,
really.big = TRUE)
summary(qol_regfit_full)
reg_fit_summary <- summary(qol_regfit_full)
# identifying ideal number of variables
which.min(reg_fit_summary$rss)
which.max(reg_fit_summary$adjr2)
which.min(reg_fit_summary$cp)
which.max(reg_fit_summary$bic)
qol_names <- names(qol_data)
qol_names
qol_state_names <- names(qol_state_median)
# Load necessary packages
library(randomForest)
# Rename the variable using names function
names(qol_numeric)[names(qol_numeric) == "pct_w/medicare"] <- "pct_w_medicare"
names(qol_numeric)[names(qol_numeric) == "pct_hh_inc_99,999"] <- "pct_hh_inc_99999"
names(qol_numeric)[names(qol_numeric) == "water_0:1_bad_good"] <- "water_0_or_1_bad_good"
names(qol_numeric)[names(qol_numeric) == "school_segregation_0:1__low:high"] <- "school_segregation_0_or_1_low_or_high"
# Ensure the response variable is a factor
qol_numeric$response <- as.factor(qol_numeric$response)
# Split the data into training and testing sets
set.seed(12)  # For reproducibility
train_indices <- sample(seq_len(nrow(qol_numeric)), size = 0.75 * nrow(qol_numeric))
train_data <- qol_numeric[train_indices, ]
test_data <- qol_numeric[-train_indices, ]
# Fit the random forest model
rf_model <- randomForest(response ~ ., data = train_data, ntree = 500, mtry = 3, importance = TRUE)
# Print the model summary
print(rf_model)
# Predict on the test set
predictions <- predict(rf_model, newdata = test_data)
# Evaluate the model
confusion_matrix <- table(test_data$response, predictions)
print(confusion_matrix)
# Calculate accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(paste("Accuracy:", round(accuracy * 100, 2), "%"))
# Extract variable importance
importance_scores <- importance(rf_model, type = 1)
importance_df <- data.frame(Feature = rownames(importance_scores), Importance = importance_scores[, 1])
# Arrange the factors in descending order and select the top 25
top_25_importance <- importance_df %>%
arrange(desc(Importance)) %>%
head(25)
# Plot the top 25 factors using ggplot2
ggplot(top_25_importance, aes(x = reorder(Feature, Importance), y = Importance)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Top 25 Important Features", x = "Features", y = "Importance") +
theme_minimal()
# Load necessary packages
library(dplyr)
library(ggplot2)
# Ensure the response variable is a factor
qol_numeric$response <- as.factor(qol_numeric$response)
# Split the data into training and testing sets
set.seed(123)  # For reproducibility
train_indices <- sample(seq_len(nrow(qol_numeric)), size = 0.7 * nrow(qol_numeric))
train_data <- qol_numeric[train_indices, ]
test_data <- qol_numeric[-train_indices, ]
# Fit the logistic regression model
logit_model <- glm(response ~ ., data = train_data, family = binomial)
# Print the model summary
summary(logit_model)
# Predict on the test set
predictions <- predict(logit_model, newdata = test_data, type = "response")
# Convert probabilities to binary outcomes
predicted_classes <- ifelse(predictions > 0.5, 1, 0)
# Evaluate the model
confusion_matrix <- table(test_data$response, predicted_classes)
print(confusion_matrix)
# Calculate accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(paste("Accuracy:", round(accuracy * 100, 2), "%"))
# Plot the top 25 important features (if applicable)
# Extract variable importance (coefficients)
importance_df <- data.frame(Feature = names(coef(logit_model)), Importance = abs(coef(logit_model)))
# Arrange the factors in descending order and select the top 25
top_25_importance <- importance_df %>%
arrange(desc(Importance)) %>%
head(25)
# Plot using ggplot2
ggplot(top_25_importance, aes(x = reorder(Feature, Importance), y = Importance)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Top 25 Important Features", x = "Features", y = "Importance") +
theme_minimal()
install.packages("ggplot2")
install.packages("dplyr")
install.packages("sf")
install.packages("tigris")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("ggplot2")
# Load necessary packages
library(ggplot2)
library(dplyr)
library(sf)
library(tigris)
# Ensure the FIPS code is in the correct format
qol_numeric$fips_code <- sprintf("%05d", qol_numeric$fips_code)
# Load US counties shapefile
counties <- counties(cb = TRUE, resolution = "20m")
# Merge your data with the counties shapefile
merged_data <- counties %>%
left_join(qol_numeric, by = c("GEOID" = "fips_code"))
# Create the heat map
ggplot(data = merged_data) +
geom_sf(aes(fill = pct_adult_smokers), color = NA) +
scale_fill_viridis_c(option = "plasma", na.value = "grey50") +
labs(title = "Heat Map of Adult Smokers by US County",
fill = "Percentage of Adult Smokers") +
theme_minimal()
# Load necessary packages
library(ggplot2)
library(dplyr)
library(sf)
library(tigris)
# Ensure the FIPS code is in the correct format
qol_numeric$fips_code <- sprintf("%05d", qol_numeric$fips_code)
# Load necessary packages
library(ggplot2)
library(dplyr)
library(sf)
library(tigris)
# Ensure the FIPS code is in the correct format
qol_numeric$fips_code <- sprintf("%05d", qol_numeric$fips_code)
# Load necessary packages
library(ggplot2)
library(dplyr)
library(sf)
library(tigris)
# Ensure the FIPS code is in the correct format
qol_numeric$fips_code <- sprintf("%05d", qol_numeric$fips_code)
# Load necessary packages
library(ggplot2)
library(dplyr)
library(sf)
library(tigris)
# Ensure the FIPS code is in the correct format
#qol_numeric$fips_code <- sprintf("%05d", qol_numeric$fips_code)
# Load US counties shapefile
counties <- counties(cb = TRUE, resolution = "20m")
# Merge your data with the counties shapefile
merged_data <- counties %>%
left_join(qol_numeric, by = c("GEOID" = "fips_code"))
# Create the heat map
ggplot(data = merged_data) +
geom_sf(aes(fill = pct_adult_smokers), color = NA) +
scale_fill_viridis_c(option = "plasma", na.value = "grey50") +
labs(title = "Heat Map of Adult Smokers by US County",
fill = "Percentage of Adult Smokers") +
theme_minimal()
# Load necessary packages
library(ggplot2)
library(dplyr)
library(sf)
library(tigris)
# Ensure the FIPS code is in the correct format
#qol_numeric$fips_code <- sprintf("%05d", qol_numeric$fips_code)
# Load US counties shapefile
counties <- counties(cb = TRUE, resolution = "20m")
# Merge your data with the counties shapefile
merged_data <- counties %>%
left_join(qol_numeric, by = c("GEOID" = "fips_code"))
# Create the heat map
ggplot(data = merged_data) +
geom_sf(aes(fill = pct_overcrowded_hh), color = NA) +
scale_fill_viridis_c(option = "plasma", na.value = "grey50") +
labs(title = "Heat Map of Adult Smokers by US County",
fill = "Percentage of Adult Smokers") +
theme_minimal()
# Load necessary packages
library(ggplot2)
library(dplyr)
library(sf)
library(tigris)
# Ensure the FIPS code is in the correct format
#qol_numeric$fips_code <- sprintf("%05d", qol_numeric$fips_code)
# Load US counties shapefile
counties <- counties(cb = TRUE, resolution = "20m")
# Merge your data with the counties shapefile
merged_data <- counties %>%
left_join(qol_numeric, by = c("GEOID" = "fips_code"))
# Create the heat map
ggplot(data = merged_data) +
geom_sf(aes(fill = pct_adult_smokers), color = NA) +
scale_fill_viridis_c(option = "plasma", na.value = "grey50") +
labs(title = "Heat Map of Adult Smokers by US County",
fill = "Percentage of Adult Smokers") +
theme_minimal()
# Calculate the proportion of the binary response within each county
response_proportion <- qol_numeric %>%
group_by(fips_code) %>%
summarise(response_rate = mean(response))
# Merge the response proportion with the counties shapefile
merged_data_response <- counties %>%
left_join(response_proportion, by = c("GEOID" = "fips_code"))
# Create heat maps for each feature
p1 <- ggplot(data = merged_data) +
geom_sf(aes(fill = pct_adult_smokers), color = NA) +
scale_fill_viridis_c(option = "plasma", na.value = "grey50") +
labs(title = "Heat Map of Adult Smokers by US County",
fill = "Percentage of Adult Smokers") +
theme_minimal()
p2 <- ggplot(data = merged_data_response) +
geom_sf(aes(fill = response_rate), color = NA) +
scale_fill_viridis_c(option = "plasma", na.value = "grey50") +
labs(title = "Heat Map of Response Rate by US County",
fill = "Response Rate") +
theme_minimal()
# Display the heat maps side by side
grid.arrange(p1, p2, ncol = 2)
# Install the gridExtra package if you haven't already
install.packages("gridExtra")
# Load the gridExtra package
library(gridExtra)
library(gridExtra)
# Calculate the proportion of the binary response within each county
response_proportion <- qol_numeric %>%
group_by(fips_code) %>%
summarise(response_rate = mean(response))
# Merge the response proportion with the counties shapefile
merged_data_response <- counties %>%
left_join(response_proportion, by = c("GEOID" = "fips_code"))
# Create heat maps for each feature
p1 <- ggplot(data = merged_data) +
geom_sf(aes(fill = pct_adult_smokers), color = NA) +
scale_fill_viridis_c(option = "plasma", na.value = "grey50") +
labs(title = "Heat Map of Adult Smokers by US County",
fill = "Percentage of Adult Smokers") +
theme_minimal()
p2 <- ggplot(data = merged_data_response) +
geom_sf(aes(fill = response_rate), color = NA) +
scale_fill_viridis_c(option = "plasma", na.value = "grey50") +
labs(title = "Heat Map of Response Rate by US County",
fill = "Response Rate") +
theme_minimal()
# Display the heat maps side by side
grid.arrange(p1, p2, ncol = 2)
